version: '3.2'

services:
  db:
    image: postgres
    restart: always
    volumes:
      - ./db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    networks:
      - backend

  app:
    image: nextcloud:${NEXTCLOUD_VERSION}
    restart: always
    volumes: &nextcloud_vol
      - /mnt/nextcloud-dp/nextcloud:/var/www/html
      - /mnt/nextcloud-dp/php-settings:/usr/local/etc
      - ./crontab:/var/spool/cron/crontabs/www-data:ro
      #- ./secrets/redis_password.txt:/run/secrets/redis_password
    environment: &nextcloud_env
      - POSTGRES_HOST=db
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - NEXTCLOUD_ADMIN_PASSWORD_FILE=/run/secrets/nextcloud_admin_password
      - NEXTCLOUD_ADMIN_USER_FILE=/run/secrets/nextcloud_admin_user
      - VIRTUAL_HOST=${NEXTCLOUD_VIRTUAL_HOST}
      - NEXTCLOUD_TRUSTED_DOMAINS=${NEXTCLOUD_VIRTUAL_HOST}
      - REDIS_HOST=redis
      #- REDIS_HOST_PASSWORD=/run/secrets/redis_password
    depends_on: &nextcloud_dep
      - db
      - redis
    secrets:
      - nextcloud_admin_password
      - nextcloud_admin_user
      - postgres_db
      - postgres_password
      - postgres_user
    networks: &nextcloud_net
      - backend
      - frontend

  cron:
    image: nextcloud:${NEXTCLOUD_VERSION}
    restart: always
    volumes: *nextcloud_vol
    environment: *nextcloud_env
    entrypoint: /cron.sh
    depends_on: *nextcloud_dep
    networks: *nextcloud_net

  redis:
    image: redis:latest
    #environment:
    #  - REDIS_HOST_PASSWORD=/run/secrets/redis_password
    #command: bash -c '[ "$$REDIS_HOST_PASSWORD" ] &&
    #  ( cat "$$REDIS_HOST_PASSWORD" | xargs redis-server --appendonly yes --requirepass)' #|| redis-server --appendonly yes'
    command: redis-server --appendonly yes
    restart: always
    volumes:
      - ./redis/data:/data
    #  - ./secrets/redis_password.txt:/run/secrets/redis_password
    networks:
      - backend

  caddy:
    container_name: caddy
    image: caddy:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      #- ./caddy/secrets/cert.pem:/etc/caddy/cert.pem
      #- ./caddy/secrets/key.pem:/etc/caddy/key.pem
      # - ./caddy/site:/srv
      - ./caddy/caddy_data:/data
      #- ./caddy/caddy_config:/config
      - /mnt/nextcloud-dp/nextcloud:/var/www/html
    networks:
      - frontend

  gateway:
    image: nicedexter/hip-gateway:latest
    environment:
        - APP_HOST=${APP_HOST}
        - APP_BASIC_AUTH=${APP_BASIC_AUTH}
    expose:
      - 4000
    networks:
      - frontend
    command: npm run start:dev


networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
  backend:
    internal: true

secrets:
  nextcloud_admin_password:
    file: ./secrets/nextcloud_admin_password.txt # put admin password to this file
  nextcloud_admin_user:
    file: ./secrets/nextcloud_admin_user.txt # put admin username to this file
  postgres_db:
    file: ./secrets/postgres_db.txt # put postgresql db name to this file
  postgres_password:
    file: ./secrets/postgres_password.txt # put postgresql password to this file
  postgres_user:
    file: ./secrets/postgres_user.txt # put postgresql username to this file
  #  redis_password:
    #file: ./secrets/redis_password.txt  # put redis password to this file
